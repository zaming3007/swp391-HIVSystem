import React, { useState } from 'react';
import {
    Box,
    Typography,
    Card,
    CardContent,
    Grid,
    Button,
    Stepper,
    Step,
    StepLabel,
    StepContent,
    Paper,
    List,
    ListItem,
    ListItemIcon,
    ListItemText,
    Chip,
    Alert,
    Divider
} from '@mui/material';
import {
    Person as PatientIcon,
    LocalHospital as DoctorIcon,
    Medication as MedicationIcon,
    Notifications as NotificationIcon,
    TrendingUp as TrendingUpIcon,
    CheckCircle as CheckIcon
} from '@mui/icons-material';

const ARVWorkflowDemo: React.FC = () => {
    const [activeStep, setActiveStep] = useState(0);

    const steps = [
        {
            label: 'B·ªánh nh√¢n ghi nh·∫≠n tu√¢n th·ªß ƒëi·ªÅu tr·ªã',
            description: 'B·ªánh nh√¢n s·ª≠ d·ª•ng ·ª©ng d·ª•ng ƒë·ªÉ ghi nh·∫≠n vi·ªác u·ªëng thu·ªëc h√†ng ng√†y',
            icon: <PatientIcon color="primary" />,
            details: [
                'Ghi nh·∫≠n s·ªë li·ªÅu ƒë√£ u·ªëng trong ng√†y',
                'Th√™m ghi ch√∫ v·ªÅ t√°c d·ª•ng ph·ª• (n·∫øu c√≥)',
                'H·ªá th·ªëng t·ª± ƒë·ªông t√≠nh t·ª∑ l·ªá tu√¢n th·ªß',
                'D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u v√†o database'
            ]
        },
        {
            label: 'H·ªá th·ªëng ph√¢n t√≠ch v√† c·∫£nh b√°o',
            description: 'H·ªá th·ªëng t·ª± ƒë·ªông ph√¢n t√≠ch m·ª©c ƒë·ªô tu√¢n th·ªß v√† t·∫°o c·∫£nh b√°o',
            icon: <TrendingUpIcon color="warning" />,
            details: [
                'T√≠nh to√°n t·ª∑ l·ªá tu√¢n th·ªß theo tu·∫ßn/th√°ng',
                'Ph√°t hi·ªán xu h∆∞·ªõng gi·∫£m tu√¢n th·ªß',
                'T·∫°o c·∫£nh b√°o khi tu√¢n th·ªß < 85%',
                'G·ª≠i th√¥ng b√°o ƒë·∫øn b√°c sƒ© ph·ª• tr√°ch'
            ]
        },
        {
            label: 'B√°c sƒ© nh·∫≠n th√¥ng b√°o v√† xem chi ti·∫øt',
            description: 'B√°c sƒ© ƒë∆∞·ª£c th√¥ng b√°o v√† c√≥ th·ªÉ xem chi ti·∫øt tu√¢n th·ªß c·ªßa b·ªánh nh√¢n',
            icon: <NotificationIcon color="error" />,
            details: [
                'Nh·∫≠n th√¥ng b√°o real-time',
                'Xem bi·ªÉu ƒë·ªì tu√¢n th·ªß chi ti·∫øt',
                'Ph√¢n t√≠ch nguy√™n nh√¢n gi·∫£m tu√¢n th·ªß',
                'Xem l·ªãch s·ª≠ ƒëi·ªÅu tr·ªã c·ªßa b·ªánh nh√¢n'
            ]
        },
        {
            label: 'B√°c sƒ© t∆∞∆°ng t√°c v·ªõi b·ªánh nh√¢n',
            description: 'B√°c sƒ© c√≥ th·ªÉ g·ª≠i l·ªùi khuy√™n ho·∫∑c ƒëi·ªÅu ch·ªânh ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã',
            icon: <DoctorIcon color="success" />,
            details: [
                'G·ª≠i tin nh·∫Øn khuy·∫øn kh√≠ch/nh·∫Øc nh·ªü',
                'ƒêi·ªÅu ch·ªânh li·ªÅu l∆∞·ª£ng thu·ªëc',
                'Thay ƒë·ªïi ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã',
                'L√™n l·ªãch t√°i kh√°m'
            ]
        },
        {
            label: 'B·ªánh nh√¢n nh·∫≠n ph·∫£n h·ªìi',
            description: 'B·ªánh nh√¢n nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ b√°c sƒ© v√† c·∫≠p nh·∫≠t ƒëi·ªÅu tr·ªã',
            icon: <MedicationIcon color="primary" />,
            details: [
                'Nh·∫≠n tin nh·∫Øn t·ª´ b√°c sƒ©',
                'C·∫≠p nh·∫≠t ph√°c ƒë·ªì m·ªõi (n·∫øu c√≥)',
                'Theo d√µi h∆∞·ªõng d·∫´n m·ªõi',
                'Ti·∫øp t·ª•c ghi nh·∫≠n tu√¢n th·ªß'
            ]
        }
    ];

    const handleNext = () => {
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
    };

    const handleBack = () => {
        setActiveStep((prevActiveStep) => prevActiveStep - 1);
    };

    const handleReset = () => {
        setActiveStep(0);
    };

    return (
        <Box sx={{ flexGrow: 1, p: 3 }}>
            <Typography variant="h4" component="h1" gutterBottom align="center">
                üîÑ Workflow T∆∞∆°ng T√°c B√°c Sƒ© - B·ªánh Nh√¢n
            </Typography>
            <Typography variant="h6" color="text.secondary" align="center" sx={{ mb: 4 }}>
                Quy tr√¨nh qu·∫£n l√Ω ARV th√¥ng minh trong h·ªá th·ªëng HIV Healthcare
            </Typography>

            {/* Overview Cards */}
            <Grid container spacing={3} sx={{ mb: 4 }}>
                <Grid item xs={12} md={4}>
                    <Card sx={{ height: '100%', backgroundColor: 'primary.light', color: 'white' }}>
                        <CardContent>
                            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                                <PatientIcon sx={{ mr: 1 }} />
                                <Typography variant="h6">B·ªánh nh√¢n</Typography>
                            </Box>
                            <Typography variant="body2">
                                ‚Ä¢ Ghi nh·∫≠n tu√¢n th·ªß h√†ng ng√†y<br/>
                                ‚Ä¢ Nh·∫≠n th√¥ng b√°o t·ª´ b√°c sƒ©<br/>
                                ‚Ä¢ Theo d√µi ti·∫øn tr√¨nh ƒëi·ªÅu tr·ªã
                            </Typography>
                        </CardContent>
                    </Card>
                </Grid>
                <Grid item xs={12} md={4}>
                    <Card sx={{ height: '100%', backgroundColor: 'success.light', color: 'white' }}>
                        <CardContent>
                            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                                <DoctorIcon sx={{ mr: 1 }} />
                                <Typography variant="h6">B√°c sƒ©</Typography>
                            </Box>
                            <Typography variant="body2">
                                ‚Ä¢ Theo d√µi tu√¢n th·ªß real-time<br/>
                                ‚Ä¢ ƒêi·ªÅu ch·ªânh ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã<br/>
                                ‚Ä¢ T∆∞∆°ng t√°c tr·ª±c ti·∫øp v·ªõi b·ªánh nh√¢n
                            </Typography>
                        </CardContent>
                    </Card>
                </Grid>
                <Grid item xs={12} md={4}>
                    <Card sx={{ height: '100%', backgroundColor: 'warning.light', color: 'white' }}>
                        <CardContent>
                            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                                <TrendingUpIcon sx={{ mr: 1 }} />
                                <Typography variant="h6">H·ªá th·ªëng</Typography>
                            </Box>
                            <Typography variant="body2">
                                ‚Ä¢ Ph√¢n t√≠ch d·ªØ li·ªáu t·ª± ƒë·ªông<br/>
                                ‚Ä¢ C·∫£nh b√°o s·ªõm<br/>
                                ‚Ä¢ Th√¥ng b√°o real-time
                            </Typography>
                        </CardContent>
                    </Card>
                </Grid>
            </Grid>

            {/* Workflow Stepper */}
            <Card>
                <CardContent>
                    <Typography variant="h5" gutterBottom>
                        Chi ti·∫øt quy tr√¨nh
                    </Typography>
                    
                    <Stepper activeStep={activeStep} orientation="vertical">
                        {steps.map((step, index) => (
                            <Step key={step.label}>
                                <StepLabel
                                    optional={
                                        index === steps.length - 1 ? (
                                            <Typography variant="caption">B∆∞·ªõc cu·ªëi</Typography>
                                        ) : null
                                    }
                                    icon={step.icon}
                                >
                                    <Typography variant="h6">{step.label}</Typography>
                                </StepLabel>
                                <StepContent>
                                    <Typography sx={{ mb: 2 }}>
                                        {step.description}
                                    </Typography>
                                    
                                    <Paper sx={{ p: 2, mb: 2, backgroundColor: 'grey.50' }}>
                                        <Typography variant="subtitle2" gutterBottom>
                                            Chi ti·∫øt th·ª±c hi·ªán:
                                        </Typography>
                                        <List dense>
                                            {step.details.map((detail, detailIndex) => (
                                                <ListItem key={detailIndex} sx={{ py: 0.5 }}>
                                                    <ListItemIcon sx={{ minWidth: 30 }}>
                                                        <CheckIcon color="success" fontSize="small" />
                                                    </ListItemIcon>
                                                    <ListItemText primary={detail} />
                                                </ListItem>
                                            ))}
                                        </List>
                                    </Paper>

                                    <Box sx={{ mb: 2 }}>
                                        <div>
                                            <Button
                                                variant="contained"
                                                onClick={handleNext}
                                                sx={{ mt: 1, mr: 1 }}
                                                disabled={index === steps.length - 1}
                                            >
                                                {index === steps.length - 1 ? 'Ho√†n th√†nh' : 'Ti·∫øp theo'}
                                            </Button>
                                            <Button
                                                disabled={index === 0}
                                                onClick={handleBack}
                                                sx={{ mt: 1, mr: 1 }}
                                            >
                                                Quay l·∫°i
                                            </Button>
                                        </div>
                                    </Box>
                                </StepContent>
                            </Step>
                        ))}
                    </Stepper>

                    {activeStep === steps.length && (
                        <Paper square elevation={0} sx={{ p: 3 }}>
                            <Alert severity="success" sx={{ mb: 2 }}>
                                <Typography variant="h6" gutterBottom>
                                    üéâ Workflow ho√†n th√†nh!
                                </Typography>
                                <Typography>
                                    Quy tr√¨nh t∆∞∆°ng t√°c gi·ªØa b√°c sƒ© v√† b·ªánh nh√¢n ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p ho√†n ch·ªânh. 
                                    H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông h·ªó tr·ª£ vi·ªác theo d√µi v√† qu·∫£n l√Ω ƒëi·ªÅu tr·ªã ARV hi·ªáu qu·∫£.
                                </Typography>
                            </Alert>
                            <Button onClick={handleReset} sx={{ mt: 1, mr: 1 }}>
                                Xem l·∫°i t·ª´ ƒë·∫ßu
                            </Button>
                        </Paper>
                    )}
                </CardContent>
            </Card>

            {/* Benefits */}
            <Card sx={{ mt: 3 }}>
                <CardContent>
                    <Typography variant="h5" gutterBottom>
                        üéØ L·ª£i √≠ch c·ªßa workflow
                    </Typography>
                    <Grid container spacing={2}>
                        <Grid item xs={12} md={6}>
                            <Typography variant="h6" color="primary" gutterBottom>
                                Cho b·ªánh nh√¢n:
                            </Typography>
                            <List dense>
                                <ListItem>
                                    <ListItemIcon><CheckIcon color="success" /></ListItemIcon>
                                    <ListItemText primary="Nh·∫≠n ƒë∆∞·ª£c s·ª± theo d√µi ch·∫∑t ch·∫Ω t·ª´ b√°c sƒ©" />
                                </ListItem>
                                <ListItem>
                                    <ListItemIcon><CheckIcon color="success" /></ListItemIcon>
                                    <ListItemText primary="ƒê∆∞·ª£c h∆∞·ªõng d·∫´n k·ªãp th·ªùi khi c√≥ v·∫•n ƒë·ªÅ" />
                                </ListItem>
                                <ListItem>
                                    <ListItemIcon><CheckIcon color="success" /></ListItemIcon>
                                    <ListItemText primary="TƒÉng ƒë·ªông l·ª±c tu√¢n th·ªß ƒëi·ªÅu tr·ªã" />
                                </ListItem>
                            </List>
                        </Grid>
                        <Grid item xs={12} md={6}>
                            <Typography variant="h6" color="primary" gutterBottom>
                                Cho b√°c sƒ©:
                            </Typography>
                            <List dense>
                                <ListItem>
                                    <ListItemIcon><CheckIcon color="success" /></ListItemIcon>
                                    <ListItemText primary="Theo d√µi b·ªánh nh√¢n real-time" />
                                </ListItem>
                                <ListItem>
                                    <ListItemIcon><CheckIcon color="success" /></ListItemIcon>
                                    <ListItemText primary="Can thi·ªáp k·ªãp th·ªùi khi c·∫ßn thi·∫øt" />
                                </ListItem>
                                <ListItem>
                                    <ListItemIcon><CheckIcon color="success" /></ListItemIcon>
                                    <ListItemText primary="T·ªëi ∆∞u h√≥a hi·ªáu qu·∫£ ƒëi·ªÅu tr·ªã" />
                                </ListItem>
                            </List>
                        </Grid>
                    </Grid>
                </CardContent>
            </Card>
        </Box>
    );
};

export default ARVWorkflowDemo;
