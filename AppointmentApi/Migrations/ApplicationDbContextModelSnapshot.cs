// <auto-generated />
using System;
using AppointmentApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AppointmentApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppointmentApi.Models.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedAt = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2025, 1, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = "1",
                            DoctorName = "Minh Nguyễn",
                            EndTime = "10:00",
                            Notes = "Khám sức khỏe định kỳ hàng năm",
                            PatientId = "patient1",
                            PatientName = "Khách hàng Mẫu",
                            ServiceId = "1",
                            ServiceName = "Khám tổng quát",
                            StartTime = "09:00",
                            Status = "Confirmed"
                        },
                        new
                        {
                            Id = "2",
                            CreatedAt = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2025, 1, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = "2",
                            DoctorName = "Hoa Trần",
                            EndTime = "14:30",
                            Notes = "Khám tình trạng dị ứng da",
                            PatientId = "patient1",
                            PatientName = "Khách hàng Mẫu",
                            ServiceId = "3",
                            ServiceName = "Khám da liễu",
                            StartTime = "14:00",
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("AppointmentApi.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Doctors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Available = true,
                            Bio = "Bác sĩ Minh có hơn 10 năm kinh nghiệm trong lĩnh vực nhi khoa.",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "minh.nguyen@example.com",
                            Experience = 10,
                            FirstName = "Minh",
                            LastName = "Nguyễn",
                            Phone = "0901234567",
                            ProfileImage = "/doctor-profiles/minh-nguyen.jpg",
                            Specialization = "Nhi khoa"
                        },
                        new
                        {
                            Id = "2",
                            Available = true,
                            Bio = "Bác sĩ Hoa chuyên về các vấn đề da liễu và thẩm mỹ.",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "hoa.tran@example.com",
                            Experience = 8,
                            FirstName = "Hoa",
                            LastName = "Trần",
                            Phone = "0912345678",
                            ProfileImage = "/doctor-profiles/hoa-tran.jpg",
                            Specialization = "Da liễu"
                        },
                        new
                        {
                            Id = "3",
                            Available = true,
                            Bio = "Bác sĩ Tuấn là chuyên gia hàng đầu về bệnh tim mạch.",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "tuan.le@example.com",
                            Experience = 15,
                            FirstName = "Tuấn",
                            LastName = "Lê",
                            Phone = "0923456789",
                            ProfileImage = "/doctor-profiles/tuan-le.jpg",
                            Specialization = "Tim mạch"
                        });
                });

            modelBuilder.Entity("AppointmentApi.Models.Service", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Category = "Khám tổng quát",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Khám sức khỏe tổng quát định kỳ",
                            Duration = 60,
                            ImageUrl = "/services/general-checkup.jpg",
                            Name = "Khám tổng quát",
                            Price = 300000m
                        },
                        new
                        {
                            Id = "2",
                            Category = "Dinh dưỡng",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Tư vấn chế độ dinh dưỡng phù hợp",
                            Duration = 45,
                            ImageUrl = "/services/nutrition-consulting.jpg",
                            Name = "Tư vấn dinh dưỡng",
                            Price = 250000m
                        },
                        new
                        {
                            Id = "3",
                            Category = "Da liễu",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Khám và điều trị các vấn đề về da",
                            Duration = 30,
                            ImageUrl = "/services/dermatology.jpg",
                            Name = "Khám da liễu",
                            Price = 350000m
                        });
                });

            modelBuilder.Entity("AppointmentApi.Models.TimeSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("TimeSlots", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            DayOfWeek = 1,
                            DoctorId = "1",
                            EndTime = "12:00",
                            StartTime = "08:00"
                        },
                        new
                        {
                            Id = "2",
                            DayOfWeek = 3,
                            DoctorId = "1",
                            EndTime = "17:00",
                            StartTime = "13:00"
                        },
                        new
                        {
                            Id = "3",
                            DayOfWeek = 2,
                            DoctorId = "2",
                            EndTime = "12:00",
                            StartTime = "08:00"
                        },
                        new
                        {
                            Id = "4",
                            DayOfWeek = 4,
                            DoctorId = "2",
                            EndTime = "17:00",
                            StartTime = "13:00"
                        },
                        new
                        {
                            Id = "5",
                            DayOfWeek = 5,
                            DoctorId = "3",
                            EndTime = "17:00",
                            StartTime = "08:00"
                        });
                });

            modelBuilder.Entity("AppointmentApi.Models.Appointment", b =>
                {
                    b.HasOne("AppointmentApi.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentApi.Models.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AppointmentApi.Models.TimeSlot", b =>
                {
                    b.HasOne("AppointmentApi.Models.Doctor", "Doctor")
                        .WithMany("WorkingHours")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("AppointmentApi.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("AppointmentApi.Models.Service", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
