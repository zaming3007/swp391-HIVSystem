// <auto-generated />
using System;
using AuthApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250628153956_AddConsultationAndReminderTables")]
    partial class AddConsultationAndReminderTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthApi.Models.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConsultationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("consultation_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ResponderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("responder_id");

                    b.Property<string>("ResponderName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("responder_name");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationId");

                    b.ToTable("answers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConsultationId = "2",
                            Content = "Chế độ ăn giàu protein, vitamin và khoáng chất sẽ giúp tăng cường hệ miễn dịch. Nên ăn nhiều rau xanh, trái cây, thịt nạc và cá. Hãy đảm bảo uống đủ nước và hạn chế đồ ăn nhiều dầu mỡ và đường.",
                            CreatedAt = new DateTime(2024, 12, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            ResponderId = "2",
                            ResponderName = "Doctor User"
                        },
                        new
                        {
                            Id = "2",
                            ConsultationId = "3",
                            Content = "Tình trạng mất ngủ có thể là tác dụng phụ của một số loại thuốc ARV. Tôi khuyên bạn nên uống thuốc vào buổi sáng thay vì buổi tối. Nếu tình trạng vẫn tiếp tục, hãy đặt lịch hẹn để chúng ta có thể đánh giá và điều chỉnh phác đồ nếu cần.",
                            CreatedAt = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            ResponderId = "2",
                            ResponderName = "Doctor User"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.Consultation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patient_id");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("consultations");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Category = "Điều trị",
                            CreatedAt = new DateTime(2024, 12, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            PatientId = "4",
                            Question = "Tôi muốn biết thêm về các tác dụng phụ của phác đồ điều trị ARV hiện tại?",
                            Status = "pending",
                            Title = "Câu hỏi về liệu trình điều trị"
                        },
                        new
                        {
                            Id = "2",
                            Category = "Dinh dưỡng",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            PatientId = "4",
                            Question = "Tôi nên ăn gì để tăng cường hệ miễn dịch khi đang điều trị?",
                            Status = "answered",
                            Title = "Tư vấn về dinh dưỡng"
                        },
                        new
                        {
                            Id = "3",
                            Category = "Điều trị",
                            CreatedAt = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            PatientId = "4",
                            Question = "Gần đây tôi bị mất ngủ sau khi uống thuốc, tôi nên làm gì?",
                            Status = "answered",
                            Title = "Câu hỏi về tác dụng phụ thuốc"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.MedicationReminder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dosage");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("frequency");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medication_name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("ReminderTimes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reminder_times");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("medication_reminders");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedAt = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Dosage = "1 viên",
                            Frequency = "daily",
                            MedicationName = "ARV Combo",
                            Notes = "Uống sau khi ăn sáng",
                            ReminderTimes = "[\"08:00\"]",
                            StartDate = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "4"
                        },
                        new
                        {
                            Id = "2",
                            CreatedAt = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            Dosage = "2 viên",
                            Frequency = "daily",
                            MedicationName = "Vitamin D",
                            Notes = "Uống cùng bữa trưa",
                            ReminderTimes = "[\"12:00\"]",
                            StartDate = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "4"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("profile_image");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = "1990-01-01",
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            LastName = "User",
                            PasswordHash = "$2a$11$ij4jecQmQGXMbP1qdQYz4.YaXiMvz2dGXRKNVKGMsPNWMeGsEfTdm",
                            Phone = "0123456789",
                            ProfileImage = "/admin-avatar.jpg",
                            Role = "admin"
                        },
                        new
                        {
                            Id = "2",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = "1985-05-15",
                            Email = "doctor@example.com",
                            FirstName = "Doctor",
                            Gender = "Female",
                            LastName = "User",
                            PasswordHash = "$2a$11$ij4jecQmQGXMbP1qdQYz4.YaXiMvz2dGXRKNVKGMsPNWMeGsEfTdm",
                            Phone = "0987654321",
                            ProfileImage = "/doctor-avatar.jpg",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = "3",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = "1992-10-20",
                            Email = "staff@example.com",
                            FirstName = "Staff",
                            Gender = "Male",
                            LastName = "User",
                            PasswordHash = "$2a$11$ij4jecQmQGXMbP1qdQYz4.YaXiMvz2dGXRKNVKGMsPNWMeGsEfTdm",
                            Phone = "0123498765",
                            ProfileImage = "/staff-avatar.jpg",
                            Role = "staff"
                        },
                        new
                        {
                            Id = "4",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = "1995-03-25",
                            Email = "customer@example.com",
                            FirstName = "Customer",
                            Gender = "Female",
                            LastName = "User",
                            PasswordHash = "$2a$11$ij4jecQmQGXMbP1qdQYz4.YaXiMvz2dGXRKNVKGMsPNWMeGsEfTdm",
                            Phone = "0987612345",
                            ProfileImage = "/customer-avatar.jpg",
                            Role = "customer"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.Answer", b =>
                {
                    b.HasOne("AuthApi.Models.Consultation", "Consultation")
                        .WithMany("Answers")
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("AuthApi.Models.MedicationReminder", b =>
                {
                    b.HasOne("AuthApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthApi.Models.Consultation", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
