// <auto-generated />
using System;
using AuthApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250713112533_RemoveImageUrlFromServices")]
    partial class RemoveImageUrlFromServices
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthApi.Models.ARVDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Contraindications")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DrugClass")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPediatricSafe")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPregnancySafe")
                        .HasColumnType("boolean");

                    b.Property<int>("MinAge")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinWeight")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SideEffects")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("ARVDrugs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandName = "Sustiva",
                            Contraindications = "Pregnancy (first trimester), severe liver disease",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "1",
                            Description = "Non-nucleoside reverse transcriptase inhibitor",
                            Dosage = "600mg",
                            DrugClass = "NNRTI",
                            Form = "Tablet",
                            GenericName = "Efavirenz",
                            Instructions = "Take once daily at bedtime on empty stomach",
                            IsActive = true,
                            IsPediatricSafe = true,
                            IsPregnancySafe = false,
                            MinAge = 3,
                            MinWeight = 10m,
                            Name = "Efavirenz",
                            SideEffects = "Dizziness, drowsiness, trouble concentrating, unusual dreams",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "1"
                        },
                        new
                        {
                            Id = 2,
                            BrandName = "Truvada",
                            Contraindications = "Severe kidney disease, lactic acidosis",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "1",
                            Description = "Nucleoside reverse transcriptase inhibitor combination",
                            Dosage = "300mg/200mg",
                            DrugClass = "NRTI",
                            Form = "Tablet",
                            GenericName = "Tenofovir DF/Emtricitabine",
                            Instructions = "Take once daily with or without food",
                            IsActive = true,
                            IsPediatricSafe = true,
                            IsPregnancySafe = true,
                            MinAge = 12,
                            MinWeight = 35m,
                            Name = "Tenofovir/Emtricitabine",
                            SideEffects = "Nausea, diarrhea, headache, fatigue",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "1"
                        },
                        new
                        {
                            Id = 3,
                            BrandName = "Tivicay",
                            Contraindications = "Hypersensitivity to dolutegravir",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "1",
                            Description = "Integrase strand transfer inhibitor",
                            Dosage = "50mg",
                            DrugClass = "INSTI",
                            Form = "Tablet",
                            GenericName = "Dolutegravir",
                            Instructions = "Take once daily with or without food",
                            IsActive = true,
                            IsPediatricSafe = true,
                            IsPregnancySafe = true,
                            MinAge = 6,
                            MinWeight = 20m,
                            Name = "Dolutegravir",
                            SideEffects = "Headache, insomnia, fatigue",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "1"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.ARVRegimen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPediatricSafe")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPregnancySafe")
                        .HasColumnType("boolean");

                    b.Property<int>("MinAge")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinWeight")
                        .HasColumnType("numeric");

                    b.Property<string>("Monitoring")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RegimenType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TargetPopulation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("ARVRegimens", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "1",
                            Description = "First-line regimen for adults and adolescents",
                            Instructions = "Take all medications once daily, preferably at the same time each day",
                            IsActive = true,
                            IsPediatricSafe = false,
                            IsPregnancySafe = true,
                            MinAge = 18,
                            MinWeight = 50m,
                            Monitoring = "Monitor viral load at 3, 6, and 12 months, then every 6 months",
                            Name = "TDF/FTC + DTG",
                            RegimenType = "FirstLine",
                            TargetPopulation = "Adult",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "1",
                            Description = "Alternative first-line regimen",
                            Instructions = "Take TDF/FTC in morning, EFV at bedtime",
                            IsActive = true,
                            IsPediatricSafe = false,
                            IsPregnancySafe = false,
                            MinAge = 18,
                            MinWeight = 50m,
                            Monitoring = "Monitor viral load and liver function regularly",
                            Name = "TDF/FTC + EFV",
                            RegimenType = "FirstLine",
                            TargetPopulation = "Adult",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "1"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.ARVRegimenDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RegimenId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Timing")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("RegimenId");

                    b.ToTable("ARVRegimenDrugs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Dosage = "300mg/200mg",
                            DrugId = 2,
                            Frequency = "Once daily",
                            RegimenId = 1,
                            SortOrder = 1,
                            SpecialInstructions = "Take at the same time every day",
                            Timing = "With or without food"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Dosage = "50mg",
                            DrugId = 3,
                            Frequency = "Once daily",
                            RegimenId = 1,
                            SortOrder = 2,
                            SpecialInstructions = "Can be taken with TDF/FTC",
                            Timing = "With or without food"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Dosage = "300mg/200mg",
                            DrugId = 2,
                            Frequency = "Once daily",
                            RegimenId = 2,
                            SortOrder = 1,
                            SpecialInstructions = "Take in the morning",
                            Timing = "Morning with food"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Dosage = "600mg",
                            DrugId = 1,
                            Frequency = "Once daily",
                            RegimenId = 2,
                            SortOrder = 2,
                            SpecialInstructions = "Take 2-3 hours after dinner",
                            Timing = "Bedtime on empty stomach"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConsultationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("consultation_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ResponderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("responder_id");

                    b.Property<string>("ResponderName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("responder_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationId");

                    b.HasIndex("ResponderId");

                    b.ToTable("Answers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConsultationId = "2",
                            Content = "Chế độ ăn giàu protein, vitamin và khoáng chất sẽ giúp tăng cường hệ miễn dịch. Nên ăn nhiều rau xanh, trái cây, thịt nạc và cá. Hãy đảm bảo uống đủ nước và hạn chế đồ ăn nhiều dầu mỡ và đường.",
                            CreatedAt = new DateTime(2024, 12, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            ResponderId = "2",
                            ResponderName = "Doctor User"
                        },
                        new
                        {
                            Id = "2",
                            ConsultationId = "3",
                            Content = "Tình trạng mất ngủ có thể là tác dụng phụ của một số loại thuốc ARV. Tôi khuyên bạn nên uống thuốc vào buổi sáng thay vì buổi tối. Nếu tình trạng vẫn tiếp tục, hãy đặt lịch hẹn để chúng ta có thể đánh giá và điều chỉnh phác đồ nếu cần.",
                            CreatedAt = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            ResponderId = "2",
                            ResponderName = "Doctor User"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("doctor_id");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("doctor_name");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("end_time");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patient_id");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patient_name");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("service_id");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("service_name");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("start_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedAt = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2025, 1, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = "1",
                            DoctorName = "Minh Nguyễn",
                            EndTime = "10:00",
                            Notes = "Khám sức khỏe định kỳ hàng năm",
                            PatientId = "4",
                            PatientName = "Customer User",
                            ServiceId = "1",
                            ServiceName = "Khám tổng quát",
                            StartTime = "09:00",
                            Status = 1
                        },
                        new
                        {
                            Id = "2",
                            CreatedAt = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2025, 1, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = "2",
                            DoctorName = "Hoa Trần",
                            EndTime = "14:30",
                            Notes = "Khám tình trạng dị ứng da",
                            PatientId = "4",
                            PatientName = "Customer User",
                            ServiceId = "3",
                            ServiceName = "Khám da liễu",
                            StartTime = "14:00",
                            Status = 0
                        });
                });

            modelBuilder.Entity("AuthApi.Models.BlogComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BlogPostId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("blog_post_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogComments", (string)null);
                });

            modelBuilder.Entity("AuthApi.Models.BlogPost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author_id");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("author_name");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer")
                        .HasColumnName("comment_count");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer")
                        .HasColumnName("view_count");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("BlogPosts", (string)null);
                });

            modelBuilder.Entity("AuthApi.Models.Consultation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patient_id");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Consultations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Category = "Điều trị",
                            CreatedAt = new DateTime(2024, 12, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            PatientId = "4",
                            Question = "Tôi muốn biết thêm về các tác dụng phụ của phác đồ điều trị ARV hiện tại?",
                            Status = "pending",
                            Title = "Câu hỏi về liệu trình điều trị"
                        },
                        new
                        {
                            Id = "2",
                            Category = "Dinh dưỡng",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            PatientId = "4",
                            Question = "Tôi nên ăn gì để tăng cường hệ miễn dịch khi đang điều trị?",
                            Status = "answered",
                            Title = "Tư vấn về dinh dưỡng"
                        },
                        new
                        {
                            Id = "3",
                            Category = "Điều trị",
                            CreatedAt = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            PatientId = "4",
                            Question = "Gần đây tôi bị mất ngủ sau khi uống thuốc, tôi nên làm gì?",
                            Status = "answered",
                            Title = "Câu hỏi về tác dụng phụ thuốc"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.ConsultationTopic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("ConsultationTopics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedAt = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Câu hỏi về điều trị ARV và các phác đồ điều trị",
                            Name = "Điều trị"
                        },
                        new
                        {
                            Id = "2",
                            CreatedAt = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Câu hỏi về các xét nghiệm CD4, viral load",
                            Name = "Xét nghiệm"
                        },
                        new
                        {
                            Id = "3",
                            CreatedAt = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Câu hỏi về tác dụng phụ của thuốc",
                            Name = "Tác dụng phụ"
                        },
                        new
                        {
                            Id = "4",
                            CreatedAt = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Câu hỏi về chế độ ăn uống và dinh dưỡng",
                            Name = "Dinh dưỡng"
                        },
                        new
                        {
                            Id = "5",
                            CreatedAt = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Câu hỏi về phòng ngừa HIV và các biện pháp bảo vệ",
                            Name = "Phòng ngừa"
                        },
                        new
                        {
                            Id = "6",
                            CreatedAt = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Các câu hỏi khác liên quan đến HIV",
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("Available")
                        .HasColumnType("boolean")
                        .HasColumnName("available");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("profile_image");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specialization");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Doctors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Available = true,
                            Bio = "Bác sĩ Minh có hơn 10 năm kinh nghiệm trong lĩnh vực nhi khoa.",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "minh.nguyen@example.com",
                            Experience = 10,
                            FirstName = "Minh",
                            LastName = "Nguyễn",
                            Phone = "0901234567",
                            ProfileImage = "/doctor-profiles/minh-nguyen.jpg",
                            Specialization = "Nhi khoa"
                        },
                        new
                        {
                            Id = "2",
                            Available = true,
                            Bio = "Bác sĩ Hoa chuyên về các vấn đề da liễu và thẩm mỹ.",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "hoa.tran@example.com",
                            Experience = 8,
                            FirstName = "Hoa",
                            LastName = "Trần",
                            Phone = "0912345678",
                            ProfileImage = "/doctor-profiles/hoa-tran.jpg",
                            Specialization = "Da liễu"
                        },
                        new
                        {
                            Id = "3",
                            Available = true,
                            Bio = "Bác sĩ Tuấn là chuyên gia hàng đầu về bệnh tim mạch.",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "tuan.le@example.com",
                            Experience = 15,
                            FirstName = "Tuấn",
                            LastName = "Lê",
                            Phone = "0923456789",
                            ProfileImage = "/doctor-profiles/tuan-le.jpg",
                            Specialization = "Tim mạch"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.DoctorService", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("doctor_id");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorServices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            DoctorId = "1",
                            ServiceId = "1"
                        },
                        new
                        {
                            Id = "2",
                            DoctorId = "1",
                            ServiceId = "2"
                        },
                        new
                        {
                            Id = "3",
                            DoctorId = "2",
                            ServiceId = "3"
                        },
                        new
                        {
                            Id = "4",
                            DoctorId = "3",
                            ServiceId = "1"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.MedicationReminder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dosage");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("frequency");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medication_name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("ReminderTimes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reminder_times");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MedicationReminders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedAt = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Dosage = "1 viên",
                            Frequency = "daily",
                            MedicationName = "ARV Combo",
                            Notes = "Uống sau khi ăn sáng",
                            ReminderTimes = "[\"08:00\"]",
                            StartDate = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "4"
                        },
                        new
                        {
                            Id = "2",
                            CreatedAt = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            Dosage = "2 viên",
                            Frequency = "daily",
                            MedicationName = "Vitamin D",
                            Notes = "Uống cùng bữa trưa",
                            ReminderTimes = "[\"12:00\"]",
                            StartDate = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "4"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.PasswordResetCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttemptCount")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("PasswordResetCodes");
                });

            modelBuilder.Entity("AuthApi.Models.PatientAdherence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdherencePercentage")
                        .HasColumnType("numeric");

                    b.Property<string>("Challenges")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PatientRegimenId")
                        .HasColumnType("integer");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("PatientRegimenId");

                    b.HasIndex("RecordedBy");

                    b.ToTable("PatientAdherences", (string)null);
                });

            modelBuilder.Entity("AuthApi.Models.PatientRegimen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiscontinuationReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PrescribedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("PrescribedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RegimenId")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescribedBy");

                    b.HasIndex("RegimenId");

                    b.ToTable("PatientRegimens", (string)null);
                });

            modelBuilder.Entity("AuthApi.Models.PatientRegimenHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PatientRegimenId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("PatientRegimenId");

                    b.HasIndex("PerformedBy");

                    b.ToTable("PatientRegimenHistories", (string)null);
                });

            modelBuilder.Entity("AuthApi.Models.Reminder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("doctor_id");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dosage");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<DateTime?>("LastNotificationSent")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_notification_sent");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medication_name");

                    b.Property<string>("Recurrence")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recurrence");

                    b.Property<string>("RecurrenceDays")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recurrence_days");

                    b.Property<string>("ReminderType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reminder_type");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval")
                        .HasColumnName("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reminders", (string)null);
                });

            modelBuilder.Entity("AuthApi.Models.Service", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Category = "Khám tổng quát",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Khám sức khỏe tổng quát định kỳ",
                            Duration = 60,
                            IsActive = true,
                            Name = "Khám tổng quát",
                            Price = 300000m
                        },
                        new
                        {
                            Id = "2",
                            Category = "Dinh dưỡng",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Tư vấn chế độ dinh dưỡng phù hợp",
                            Duration = 45,
                            IsActive = true,
                            Name = "Tư vấn dinh dưỡng",
                            Price = 250000m
                        },
                        new
                        {
                            Id = "3",
                            Category = "Da liễu",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Khám và điều trị các vấn đề về da",
                            Duration = 30,
                            IsActive = true,
                            Name = "Khám da liễu",
                            Price = 350000m
                        });
                });

            modelBuilder.Entity("AuthApi.Models.TimeSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("doctor_id");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("end_time");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("TimeSlots", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            DayOfWeek = 1,
                            DoctorId = "1",
                            EndTime = "12:00",
                            StartTime = "08:00"
                        },
                        new
                        {
                            Id = "2",
                            DayOfWeek = 3,
                            DoctorId = "1",
                            EndTime = "17:00",
                            StartTime = "13:00"
                        },
                        new
                        {
                            Id = "3",
                            DayOfWeek = 2,
                            DoctorId = "2",
                            EndTime = "12:00",
                            StartTime = "08:00"
                        },
                        new
                        {
                            Id = "4",
                            DayOfWeek = 4,
                            DoctorId = "2",
                            EndTime = "17:00",
                            StartTime = "13:00"
                        },
                        new
                        {
                            Id = "5",
                            DayOfWeek = 5,
                            DoctorId = "3",
                            EndTime = "17:00",
                            StartTime = "08:00"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text")
                        .HasColumnName("profile_image");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedAt = new DateTime(2025, 7, 13, 11, 25, 33, 60, DateTimeKind.Utc).AddTicks(5597),
                            DateOfBirth = "1990-01-01",
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            LastName = "User",
                            PasswordHash = "$2a$11$ij4jecQmQGXMbP1qdQYz4.YaXiMvz2dGXRKNVKGMsPNWMeGsEfTdm",
                            Phone = "0123456789",
                            ProfileImage = "/admin-avatar.jpg",
                            Role = "admin"
                        },
                        new
                        {
                            Id = "2",
                            CreatedAt = new DateTime(2025, 7, 13, 11, 25, 33, 60, DateTimeKind.Utc).AddTicks(7313),
                            DateOfBirth = "1985-05-15",
                            Email = "doctor@example.com",
                            FirstName = "Doctor",
                            Gender = "Female",
                            LastName = "User",
                            PasswordHash = "$2a$11$ij4jecQmQGXMbP1qdQYz4.YaXiMvz2dGXRKNVKGMsPNWMeGsEfTdm",
                            Phone = "0987654321",
                            ProfileImage = "/doctor-avatar.jpg",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = "3",
                            CreatedAt = new DateTime(2025, 7, 13, 11, 25, 33, 60, DateTimeKind.Utc).AddTicks(7366),
                            DateOfBirth = "1992-10-20",
                            Email = "staff@example.com",
                            FirstName = "Staff",
                            Gender = "Male",
                            LastName = "User",
                            PasswordHash = "$2a$11$ij4jecQmQGXMbP1qdQYz4.YaXiMvz2dGXRKNVKGMsPNWMeGsEfTdm",
                            Phone = "0123498765",
                            ProfileImage = "/staff-avatar.jpg",
                            Role = "staff"
                        },
                        new
                        {
                            Id = "4",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = "1995-03-25",
                            Email = "customer@example.com",
                            FirstName = "Customer",
                            Gender = "Female",
                            LastName = "User",
                            PasswordHash = "$2a$11$ij4jecQmQGXMbP1qdQYz4.YaXiMvz2dGXRKNVKGMsPNWMeGsEfTdm",
                            Phone = "0987612345",
                            ProfileImage = "/customer-avatar.jpg",
                            Role = "customer"
                        });
                });

            modelBuilder.Entity("AuthApi.Models.ARVRegimenDrug", b =>
                {
                    b.HasOne("AuthApi.Models.ARVDrug", "Drug")
                        .WithMany("RegimenDrugs")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthApi.Models.ARVRegimen", "Regimen")
                        .WithMany("RegimenDrugs")
                        .HasForeignKey("RegimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Regimen");
                });

            modelBuilder.Entity("AuthApi.Models.Answer", b =>
                {
                    b.HasOne("AuthApi.Models.Consultation", "Consultation")
                        .WithMany("Answers")
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthApi.Models.User", "Responder")
                        .WithMany()
                        .HasForeignKey("ResponderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");

                    b.Navigation("Responder");
                });

            modelBuilder.Entity("AuthApi.Models.Appointment", b =>
                {
                    b.HasOne("AuthApi.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AuthApi.Models.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AuthApi.Models.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AuthApi.Models.BlogComment", b =>
                {
                    b.HasOne("AuthApi.Models.BlogPost", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthApi.Models.BlogPost", b =>
                {
                    b.HasOne("AuthApi.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("AuthApi.Models.Consultation", b =>
                {
                    b.HasOne("AuthApi.Models.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AuthApi.Models.DoctorService", b =>
                {
                    b.HasOne("AuthApi.Models.Doctor", "Doctor")
                        .WithMany("DoctorServices")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthApi.Models.Service", "Service")
                        .WithMany("DoctorServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AuthApi.Models.MedicationReminder", b =>
                {
                    b.HasOne("AuthApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthApi.Models.PatientAdherence", b =>
                {
                    b.HasOne("AuthApi.Models.PatientRegimen", "PatientRegimen")
                        .WithMany("AdherenceRecords")
                        .HasForeignKey("PatientRegimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthApi.Models.User", "RecordedByUser")
                        .WithMany()
                        .HasForeignKey("RecordedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PatientRegimen");

                    b.Navigation("RecordedByUser");
                });

            modelBuilder.Entity("AuthApi.Models.PatientRegimen", b =>
                {
                    b.HasOne("AuthApi.Models.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AuthApi.Models.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("PrescribedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AuthApi.Models.ARVRegimen", "Regimen")
                        .WithMany("PatientRegimens")
                        .HasForeignKey("RegimenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Regimen");
                });

            modelBuilder.Entity("AuthApi.Models.PatientRegimenHistory", b =>
                {
                    b.HasOne("AuthApi.Models.PatientRegimen", "PatientRegimen")
                        .WithMany("History")
                        .HasForeignKey("PatientRegimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthApi.Models.User", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PatientRegimen");

                    b.Navigation("PerformedByUser");
                });

            modelBuilder.Entity("AuthApi.Models.Reminder", b =>
                {
                    b.HasOne("AuthApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthApi.Models.TimeSlot", b =>
                {
                    b.HasOne("AuthApi.Models.Doctor", "Doctor")
                        .WithMany("WorkingHours")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("AuthApi.Models.ARVDrug", b =>
                {
                    b.Navigation("RegimenDrugs");
                });

            modelBuilder.Entity("AuthApi.Models.ARVRegimen", b =>
                {
                    b.Navigation("PatientRegimens");

                    b.Navigation("RegimenDrugs");
                });

            modelBuilder.Entity("AuthApi.Models.BlogPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("AuthApi.Models.Consultation", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("AuthApi.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorServices");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("AuthApi.Models.PatientRegimen", b =>
                {
                    b.Navigation("AdherenceRecords");

                    b.Navigation("History");
                });

            modelBuilder.Entity("AuthApi.Models.Service", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorServices");
                });
#pragma warning restore 612, 618
        }
    }
}
